import express from 'express'
import fs from "fs/promises"
import { socketServer } from '../app.js'

const viewsRouter = express.Router()
const PRODUCTS_FILE = "./src/products.json"

export const getProducts = async () => {
    try {
        const data = await fs.readFile(PRODUCTS_FILE, "utf-8")
        return JSON.parse(data)
    } catch (err) {
        console.error(err)
        throw new Error('Internal Server Error')
    }
}

export const saveProducts = async (products) => {
    try {
        await fs.writeFile(PRODUCTS_FILE, JSON.stringify(products, null, 2), 'utf-8')
    } catch (err) {
        console.error(err)
        throw new Error('Internal Server Error')
    }
}

viewsRouter.get('/', async (req, res) => {
    try {
        const products = await getProducts()
        res.render('home', { products })
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

viewsRouter.get('/realtimeproducts', async (req, res) => {
    try {
        const products = await getProducts()
        res.render('realTimeProducts', { products })
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

viewsRouter.post('/api/products', async (req, res) => {
    try {
        const { id, title, description, code, price, stock, category, thumbnails } = req.body

        if (id) {
            return res.status(400).json({ error: 'You can`t generate the ID, it will be autogenerated upon existing inventory' })
        }
        // This Validates that every field is present before submitting, also if the stock is 0 or less it does not allow to enter a new product
        if (stock <= 0) {
            return res.status(400).json({ error: 'Stock must be greater than 0' })
        } else if (!title || !description || !code || !price || !stock || !category) {
            return res.status(400).json({ error: 'All fields are required but thumbnails' })
        }

        let products = await getProducts()

        if (products.some(p => p.title === title)) {
            return res.status(400).json({ error: 'A product with this TITLE already exists, check inventory first' })
        }

        const newId = products.length > 0 ? String(Number(products[products.length - 1].id) + 1) : "1"

        const newProduct = {
            id: String(newId),
            title,
            description,
            code,
            price: Number(price),
            status: true,
            stock: Number(stock),
            category,
            thumbnails: thumbnails || []
        }

        products.push(newProduct)
        await saveProducts(products)
        res.status(201).json(newProduct)
        socketServer.emit('updateProducts', products)
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
})

viewsRouter.delete('/api/products/:id', async (req, res) => {
    try {
        const productId = req.params.id
        let products = await getProducts()

        const filteredProducts = products.filter(product => product.id !== productId)

        if (products.length === filteredProducts.length) {
            return res.status(404).json({ error: 'Product not found' })
        }

        await saveProducts(filteredProducts)
        socketServer.emit('updateProducts', filteredProducts)
        res.status(200).json({ message: 'Product deleted successfully' })
    } catch (error) {
        console.error(error)
        res.status(500).json({ error: 'Internal Server Error' })
    }
});

export default viewsRouter